class Graph:
    def __init__(self, vertices) -> None:
        self.vertices = vertices
        self.adj = [[0] * self.vertices for _ in range(self.vertices)]

    def AddEdge(self, v1, v2):
        if v1 < self.vertices and v2 < self.vertices:
            self.adj[v1][v2] = 1
            self.adj[v2][v1] = 1
        else:
            return -1

    def BFS(self, start):
        visited = set()
        queue = [start]
        result = list()
        while queue:
            node = queue.pop(0)
            visited.add(node)
            result.append(node)
            for neighbour in range(self.vertices):
                if self.adj[node][neighbour] == 1 and neighbour not in visited:
                    visited.add(neighbour)
                    queue.append(neighbour)
        return result

    def DFS(self, node, visited=None, result=None):
        if not visited:
            visited = set()
            result = list()
        visited.add(node)
        result.append(node)
        for neighbour in range(self.vertices):
            if self.adj[node][neighbour] == 1 and neighbour not in visited:
                self.DFS(neighbour, visited, result)
        return result


g = Graph(6)

g.AddEdge(0, 1)
g.AddEdge(0, 2)
g.AddEdge(1, 3)
g.AddEdge(1, 4)
g.AddEdge(2, 4)
g.AddEdge(3, 5)

print("DFS Result:", g.DFS(0))
print("BFS Result:", g.BFS(0))
