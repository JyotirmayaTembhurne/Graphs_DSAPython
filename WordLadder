class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        if (not wordList) or (not beginWord) or (endWord not in wordList):
            return 0
        from collections import defaultdict, deque
        # Create adjcency list of patterns 
        adj = defaultdict(list)
        wordList.append(beginWord)
        for word in wordList:
            for j in range(len(word)):
                pattern = word[:j] + "*" + word[j + 1 :]
                adj[pattern].append(word)
        # Count how many times BFS runs
        answer = 1
        queue = deque()
        visited = set()
        queue.append(beginWord)
        visited.add(beginWord)
        while queue:
            size = len(queue)
            for _ in range(size):
                currWord = queue.popleft()
                if currWord == endWord:
                    return answer
                for i in range(len(currWord)):
                    pattern = currWord[:i] + "*" + currWord[i + 1 :]
                    for neighbour in adj[pattern]:
                        if neighbour not in visited:
                            visited.add(neighbour)
                            queue.append(neighbour)
            answer += 1
        return 0
