class Graph:
    def __init__(self) -> None:
        self.graph = dict()

    def AddVertex(self, vertex):
        if vertex not in self.graph:
            self.graph[vertex] = []

    def AddEdges(self, vertex1, vertex2):
        if vertex1 in self.graph and vertex2 in self.graph:
            self.graph[vertex1].append(vertex2)
            self.graph[vertex2].append(vertex1)

    def BFS(self, start):
        visited = set()
        queue = [start]
        result = list()
        while queue:
            node = queue.pop(0)
            if node not in visited:
                visited.add(node)
                result.append(node)
                queue.extend(self.graph[node])
        return result

    def DFS(self, start):
        visited = set()
        stack = [start]
        result = list()
        while stack:
            node = stack.pop()
            if node not in visited:
                visited.add(node)
                result.append(node)
                stack.extend(
                    neighbour
                    for neighbour in self.graph[node]
                    if neighbour not in visited
                )
        return result


# Create a graph
graph = Graph()

# Add vertices
graph.AddVertex(1)
graph.AddVertex(2)
graph.AddVertex(3)
graph.AddVertex(4)

# Add edges
graph.AddEdges(1, 2)
graph.AddEdges(1, 3)
graph.AddEdges(2, 4)
graph.AddEdges(3, 4)

res = graph.DFS(1)
print(res)
