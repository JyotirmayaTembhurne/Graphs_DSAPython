def detectCycleInDirectedGraph(n, edges):
    graph = dict()

    def CreateGraph(vertices, edges):
        for i in range(1,vertices+1):
            graph[i] = list()
        for node1, node2 in edges:
            graph[node1].append(node2)

    def DFS(node, visited, recursiveStack):
        visited[node] = True
        recursiveStack[node] = True
        for neighbour in graph[node]:
            if not visited[neighbour]:
                if DFS(neighbour, visited, recursiveStack):
                    return True
            elif recursiveStack[neighbour]:
                return True
        recursiveStack[node] = False
        return False

    CreateGraph(n, edges)

    visited = [False] * (n+1)
    recursiveStack = [False] * (n+1)

    for node in range(1,n+1):
        if not visited[node]:
            if DFS(node, visited, recursiveStack):
                return True
    return False
